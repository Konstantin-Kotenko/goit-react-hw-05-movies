{"version":3,"file":"static/js/841.e2f535be.chunk.js","mappings":"qLAGaA,E,MAAMC,GAAAA,OAAa,CAC9BC,QCJsB,+BDKtBC,OAAQ,CACNC,QCLmB,uC,gHCEjBC,EAAcC,EAAAA,GAAAA,GAAH,wHAQXC,EAASD,EAAAA,GAAAA,IAAH,qMAIO,qBAAGE,MAAkBC,MAAMC,UAMxCC,EAAQL,EAAAA,GAAAA,EAAH,kFAMEM,EAAO,SAAC,GAAwB,IAAtBC,EAAqB,EAArBA,GAAIC,EAAiB,EAAjBA,MAAOC,EAAU,EAAVA,IAC1BC,GAAWC,EAAAA,EAAAA,MAEjB,OACE,UAACZ,EAAD,YACE,SAAC,KAAD,CAAMa,GAAE,kBAAaL,GAAMM,MAAO,CAAEC,KAAMJ,GAA1C,UACE,SAACT,EAAD,CAAQQ,IAAK,kCAAoCA,EAAKM,IAAKP,OAE7D,SAACH,EAAD,UAAQG,MAJQD,IC5BhBS,EAAOhB,EAAAA,GAAAA,GAAH,iKASGiB,EAAgB,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OAC9B,OACE,SAACF,EAAD,UACGE,EAAOC,KAAI,gBAAGZ,EAAH,EAAGA,GAAIC,EAAP,EAAOA,MAAOY,EAAd,EAAcA,YAAaC,EAA3B,EAA2BA,KAA3B,OACV,SAACf,EAAD,CAAeC,GAAIA,EAAIC,MAAOA,GAAgBa,EAAMZ,IAAKW,GAA9Cb,U,mLCZbe,GAAatB,EAAAA,EAAAA,IAAOuB,EAAAA,GAAPvB,CAAH,sMAOM,qBAAGE,MAAkBsB,OAAOC,SAC/B,qBAAGvB,MAAkBC,MAAMC,UAIxCsB,EAAS1B,EAAAA,GAAAA,OAAH,onBAuBC2B,EAAY,SAAC,GAAyB,IAAvBC,EAAsB,EAAtBA,SAAUC,EAAY,EAAZA,MACpC,OACE,SAAC,KAAD,CACEC,cAAe,CAAEC,MAAK,OAAEF,QAAF,IAAEA,EAAAA,EAAS,IACjCD,SAAU,SAACI,EAAD,GAA4B,IAAjBC,EAAgB,EAAhBA,UACnBL,EAASI,GACTC,KAJJ,UAOE,UAACX,EAAD,YACE,SAACI,EAAD,CAAQQ,KAAK,SAAb,UACE,SAAC,MAAD,OAEF,SAAC,KAAD,CAAOA,KAAK,OAAOb,KAAK,gB,uCCjDnBc,EAAc,mCAAG,WAAMJ,GAAN,kGAEHrC,EAAAA,EAAAA,IAAQ,gBAAiB,CAAEG,OAAQkC,IAFhC,uBAElBK,EAFkB,EAElBA,KAFkB,kBAGnBA,GAHmB,gCAK1BC,IAAAA,OAAAA,QAAwB,0BALE,yDAAH,sDCkC3B,EA9Be,WACb,OAAwCC,EAAAA,EAAAA,MAAxC,eAAOC,EAAP,KAAqBC,EAArB,KACA,GAAwBC,EAAAA,EAAAA,UAAS,IAAjC,eAAOL,EAAP,KAAaM,EAAb,MAEAC,EAAAA,EAAAA,YAAU,WAAO,IAAD,EACVtB,EAAI,UAAGkB,EAAaK,IAAI,eAApB,QAA+B,GAC1B,KAATvB,GAGJc,EAAe,CAAEJ,MAAOV,IAAQwB,MAAK,SAAAT,GACnCM,EAAQN,EAAKU,cAEd,CAACP,IAUJ,OACE,iCACE,SAACZ,EAAD,CAAWC,SAVM,SAAAC,GACC,KAAhBA,EAAME,OACRM,IAAAA,OAAAA,QAAwB,qBAE1B,IAAMxC,EAAyB,KAAhBgC,EAAME,MAAe,CAAEV,KAAMQ,EAAME,OAAU,GAC5DS,EAAgB3C,IAKqBgC,MAAOU,EAAaK,IAAI,WAC3D,SAAC3B,EAAA,EAAD,CAAeC,OAAQkB","sources":["api/api.js","constants/apiService.js","components/MoviesGallery/Item/Item.jsx","components/MoviesGallery/MoviesGallery.jsx","components/Searchbar/Searchbar.jsx","api/getMoviesByKey.js","pages/Movies/Movies.jsx"],"sourcesContent":["import axios from 'axios';\nimport { API_KEY, BASE_URL } from 'constants/apiService';\n\nexport const api = axios.create({\n  baseURL: BASE_URL,\n  params: {\n    api_key: API_KEY,\n  },\n});\n","export const BASE_URL = 'https://api.themoviedb.org/3';\nexport const API_KEY = '9b83de628d16dffe4523b57f7d3aefed';\n","import { Link, useLocation } from 'react-router-dom';\nimport styled from 'styled-components';\n\nconst GalleryItem = styled.li`\n  cursor: pointer;\n  margin: 10px;\n  margin-bottom: 20px;\n  width: 290px;\n  height: 450px;\n`;\n\nconst Images = styled.img`\n  width: 100%;\n  text-decoration: none;\n  transition: transform 250ms cubic-bezier(0.4, 0, 0.2, 1);\n  border-radius: ${({ theme }) => theme.radii.normal};\n  &:hover {\n    transform: scale(1.03);\n  }\n`;\n\nconst Title = styled.p`\n  font-weight: 400;\n  margin: 0;\n  text-align: center;\n`;\n\nexport const Item = ({ id, title, src }) => {\n  const location = useLocation();\n\n  return (\n    <GalleryItem key={id}>\n      <Link to={`/movies/${id}`} state={{ from: location }}>\n        <Images src={`https://image.tmdb.org/t/p/w500` + src} alt={title} />\n      </Link>\n      <Title>{title}</Title>\n    </GalleryItem>\n  );\n};\n","import { Item } from './Item/Item';\nimport styled from 'styled-components';\n\nconst List = styled.ul`\n  padding: 0;\n  list-style-type: none;\n  display: flex;\n  flex-direction: row;\n  flex-wrap: wrap;\n  justify-content: space-around;\n`;\n\nexport const MoviesGallery = ({ movies }) => {\n  return (\n    <List>\n      {movies.map(({ id, title, poster_path, name }) => (\n        <Item key={id} id={id} title={title ? title : name} src={poster_path} />\n      ))}\n    </List>\n  );\n};\n","import { Formik, Field, Form } from 'formik';\nimport styled from 'styled-components';\nimport { BsSearch } from 'react-icons/bs';\n\nconst SearchForm = styled(Form)`\n  display: flex;\n  margin: 0 auto;\n  justify-content: center;\n\n  width: 100%;\n  max-width: 600px;\n  background-color: ${({ theme }) => theme.colors.white};\n  border-radius: ${({ theme }) => theme.radii.normal};\n  overflow: hidden;\n`;\n\nconst Button = styled.button`\n  color: white;\n  background-color: rgb(63, 81, 181);\n  display: inline-block;\n  width: 30px;\n  height: 30px;\n  border: 0;\n  border-radius: 4px 0 0 4px;\n  background-image: url('https://image.flaticon.com/icons/svg/149/149852.svg');\n  background-size: 40%;\n  background-repeat: no-repeat;\n  background-position: center;\n  opacity: 0.6;\n  transition: opacity 250ms cubic-bezier(0.4, 0, 0.2, 1);\n  box-shadow: rgb(0 0 0 / 20%) 0px 2px 4px -1px,\n    rgb(0 0 0 / 14%) 0px 4px 5px 0px, rgb(0 0 0 / 12%) 0px 1px 10px 0px;\n  cursor: pointer;\n  outline: none;\n  &:hover {\n    opacity: 1;\n  }\n`;\n\nexport const Searchbar = ({ onSubmit, value }) => {\n  return (\n    <Formik\n      initialValues={{ query: value ?? '' }}\n      onSubmit={(values, { resetForm }) => {\n        onSubmit(values);\n        resetForm();\n      }}\n    >\n      <SearchForm>\n        <Button type=\"submit\">\n          <BsSearch />\n        </Button>\n        <Field type=\"text\" name=\"query\" />\n      </SearchForm>\n    </Formik>\n  );\n};\n","import Notiflix from 'notiflix';\nimport { api } from './api';\n\nexport const getMoviesByKey = async query => {\n  try {\n    const { data } = await api.get('/search/movie', { params: query });\n    return data;\n  } catch (e) {\n    Notiflix.Notify.failure('Sorry please try again');\n  }\n};\n","import { useState, useEffect } from 'react';\nimport { useSearchParams } from 'react-router-dom';\nimport Notiflix from 'notiflix';\nimport { MoviesGallery } from 'components/MoviesGallery';\nimport { Searchbar } from 'components/Searchbar';\nimport { getMoviesByKey } from '../../api/getMoviesByKey';\n\nconst Movies = () => {\n  const [searchParams, setSearchParams] = useSearchParams();\n  const [data, setData] = useState([]);\n\n  useEffect(() => {\n    let name = searchParams.get('name') ?? '';\n    if (name === '') {\n      return;\n    }\n    getMoviesByKey({ query: name }).then(data => {\n      setData(data.results);\n    });\n  }, [searchParams]);\n\n  const onFormSubmit = value => {\n    if (value.query === '') {\n      Notiflix.Notify.failure('Please entry name');\n    }\n    const params = value.query !== '' ? { name: value.query } : {};\n    setSearchParams(params);\n  };\n\n  return (\n    <>\n      <Searchbar onSubmit={onFormSubmit} value={searchParams.get('name')} />\n      <MoviesGallery movies={data} />\n    </>\n  );\n};\n\nexport default Movies;\n"],"names":["api","axios","baseURL","params","api_key","GalleryItem","styled","Images","theme","radii","normal","Title","Item","id","title","src","location","useLocation","to","state","from","alt","List","MoviesGallery","movies","map","poster_path","name","SearchForm","Form","colors","white","Button","Searchbar","onSubmit","value","initialValues","query","values","resetForm","type","getMoviesByKey","data","Notiflix","useSearchParams","searchParams","setSearchParams","useState","setData","useEffect","get","then","results"],"sourceRoot":""}